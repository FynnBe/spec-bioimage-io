name: RandomBatch
description: random batch sampler
format_version: 0.1.0
language: python
# we allow for multiple citations. Each citation contains TEXT, DOI and URL. One of DOI or URL needs to be given.
cite: []
# TODO authors = github handles optional
authors:
    - Constantin Pape
    - Fynn Beutenmueller
    - Maksim Novikov
    - Florian Jug
documentation: RandomBatchSampler.md
tags: []
# optional:
thumbnail: ./RandomBatchSampler.png

dependencies: conda:./environment.yaml
# inputs:  # optional: needed if input tensor restrictions apply
#  - name: input1
#    axes: bcyx #btczyx
#    data_type: float32
#    data_range: [-inf, inf]
#    shape: # optional: needed if shape restrictions apply
#        min: [1, 1, 32, 32]
#        step: [null, 0, 32, 32]
#        # exact: [null, 1, 256, 256]  # exact can also be list

# here we assume NormalizeZeroMeanUnitVariance is tested alone.
source: ./samplers.py:RandomBatch
kwargs: [seed, output_shape, overlap]   # type this? default value: can be overwritten by model.yaml
outputs: any
# List of possible values for 'inputs' and 'outputs':
# any: any number/shape of input tensors is accepted/returned
# additional possible values for 'outputs':
# identity: number/shape of output tensors is the same as input tensors
# same number: same number of tensors as was given to input is returned (shape may change)

# Example usage:
# data_source = core.readers.nN5(uri=...)
# sampler = core.samplers.random_patch(data_source, seed=12, output_shape=[1,2,256, 256], overlap=[0, 0, 100, 100])
# OrderedDict({input: tensor_3, target: tensor_4}) = sampler.next()
# OrderedDict({input: tensor_3, target: tensor_4}) = sampler.get(100)