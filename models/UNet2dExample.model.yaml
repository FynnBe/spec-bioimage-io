# TODO discuss the depenendencies more closely

### keys shared with website rdf: https://github.com/bioimage-io/bioimage.io/blob/master/docs/resource-description-file.md

format_version: 0.3.0

name: UNet2dExample
description: A 2d U-Net.
authors:
    - Constantin Pape;@constantinpape
    - Fynn Beutenmueller

# we allow for multiple citations. Each citation contains TEXT, DOI and URL. One of DOI or URL needs to be given.
cite:
    - text: "Ronneberger, Olaf et al. U-net: Convolutional networks for biomedical image segmentation. MICCAI 2015."
      doi: https://doi.org/10.1007/978-3-319-24574-4_28

git_repo: https://github.com/bioimage-io/configuration/tree/master/models
tags: [unet2d, pytorch, nucleus-segmentation]
license: MIT

documentation: ./unet2d.md
covers: []
attachments: {}



### model spec specific keys:

# TODO physical scale of the data
inputs:
  - name: input
    data_type: float32
    data_range: [-inf, inf]
    axes: bcyx  # letters in axes in btczyx   # todo: discussion about NTCHWD versus btczyx
    shape: [1, 2, 512, 512]
    normalization:  # optional description of expected normalization scheme of input
      name: zero_mean_unit_variance  # name of normalization. currently only zero_mean_unit_variance is supported
      kwargs:  # example kwargs for zero_mean_unit_variance
        mode: fixed           # mode in [fixed, per_dataset, per_batch]
        mean: [129.1, 189.3]  # mean if mode == fixed. Here it is a list, because axes: 'c', for axes: '' this would be a float, for axes: 'cz', this would be a  list for each channel c of a nested list of means for each z position of that channel.
        std: [23.3, 32.1]     # standard deviation if mode == fixed analogously to `mean`
        axes: c               # subset of axes to normalize independently


outputs:
  - name: probabilities
    description: network probabilities in [0,1]  # optional description
    axes: bcyx
    data_type: float32
    data_range: [-inf, inf]
    halo: [0, 0, 32, 32]
    shape:
        reference_input: input
        scale: [1, 1, 1, 1]
        offset: [0, 0, 0, 0]


# language + framework specify runner
language: python
framework: pytorch
weights_format: pytorch  # specifies how the weights are stored

source: ./unet2d.py:UNet2d  # optional depending on weights_format
sha256: d6e2e4cf0562237ed0f8fbc8a518fe7047e8e75a15a8a64437bc38d7458f3687   # optional
kwargs: {input_channels: 1, output_channels: 1}
dependencies: conda:./environment.yaml

weights:
    - id: default
      name: Default Weights
      description: "Weights from DataScienceBowl"
      authors: ["author1", "author2"]
      covers: []
      source: https://zenodo.org/record/3446812/files/unet2d_weights.torch
      sha256: e4d3885bccbe41cbf6c1d825f3cd2b707c7021ead5593156007e407a16b27cf2
      timestamp: 2019-12-11T12:22:32Z  # ISO 8601
      test_inputs:  # URI's to inputs (in order as specified in inputs) for a single test case
        - ./my_default_test_input.npy
      test_outputs:  # analog to test_inputs
        - ./my_default_test_output.npy
      documentation: weight specific documenation
      tags: [test, default]
      attachments: {}  # optional
    - id: my_other_weights
      name: My Other Weights
      description: "Fine tuned weights based on DataScienceBowl"
      authors: ["author2"]
      covers: []
      source: https://zenodo.org/record/3446812/files/unet2d_weights.torch
      sha256: e4d3885bccbe41cbf6c1d825f3cd2b707c7021ead5593156007e407a16b27cf2
      timestamp: 2019-12-14T21:59:43Z  # ISO 8601
      test_inputs:
        - my_other_test_input.npy
      test_outputs:
        - my_other_test_output.npy
      documentation: my_other_weights specific documenation
      tags: [test, default]
      attachments: {}  # optional


config: # optional
  ilastik:
    only_ilastik_knows_about: lazyflow
  deepimagej:
    ij: deep-ij
