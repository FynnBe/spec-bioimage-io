from pathlib import Path
from argparse import ArgumentParser
import re
import sys

_script_path = Path(__file__).parent

autogen_header = "# Auto-generated by generate_passthrough_modules.py - do not modify\n\n"
autogen_text = autogen_header + "from .{spec_version}.{stem} import *\n"


def get_config(args):
    return {
        "main_module_path": (_script_path.parent / "bioimageio" / "spec").resolve(),
        "versioned_module_path": (_script_path.parent / "bioimageio" / "spec" / args.target_version).resolve(),
        "target_version": args.target_version,
    }


def remove_autogen_mods(config):
    for f in config["main_module_path"].glob("*.py"):
        mod_txt = f.read_text()
        m = re.match(autogen_header + "from \.(?P<version>v[\d_]+)\.", mod_txt)
        if m:
            print(f"Deleting {f} (linked version {m.groupdict()['version']})")
            f.unlink()


def updated_init_content(config) -> str:
    restr = "# autogen: start\n.*# autogen: stop"

    init_file = config["main_module_path"] / "__init__.py"
    assert init_file.exists()
    versioned_init = config["versioned_module_path"] / "__init__.py"
    module_init = config["main_module_path"] / "__init__.py"
    vx_init = module_init.read_text()
    if not re.findall(restr, vx_init, flags=re.DOTALL):
        raise RuntimeError(
            f"Could not find autogen markers in {module_init}. Excpected to find\n\n# autogen: start\n...\n# autogen: stop\n\nin your __init__."
        )
    return re.sub(restr, f"# autogen: start\n{versioned_init.read_text()}\n# autogen: stop", vx_init, flags=re.DOTALL)


def update_init(config):
    module_init = config["main_module_path"] / "__init__.py"
    module_init.write_text(updated_init_content(config))


def add_autogen_mods(config):
    for f in config["versioned_module_path"].glob("*.py"):
        if f.name.startswith("__"):
            continue

        tmp = config["main_module_path"] / f.name
        tmp.write_text(autogen_text.format(spec_version=config["target_version"], stem=f.stem))


def is_valid_generated_module(module_file: Path, spec_version: str):
    module_txt = module_file.read_text()
    if module_txt == autogen_text.format(spec_version=spec_version, stem=module_file.stem):
        return True

    return False


def check_main(args) -> int:
    print(f"Checking `bioimageio.spec` modules to link against {args.target_version}.")
    config = get_config(args)
    print(
        f"Assuming module location {config['main_module_path']}, with target spec in {config['versioned_module_path']}."
    )

    ret = 0
    for f in config["versioned_module_path"].glob("*.py"):
        if f.name == "__init__.py":
            continue
        if not (config["main_module_path"] / f.name).exists() or not is_valid_generated_module(
            config["main_module_path"] / f.name, config["target_version"]
        ):
            ret += 1
            print(f"Could not find {config['main_module_path'] / f.name}")

    if ret == 0:
        print("All seems fine.")
    else:
        print("Issues found, try regenerating.")
    return ret


def generate_main(args) -> int:
    print(f"Generating `bioimageio.spec` modules to link against {args.target_version}.")

    config = get_config(args)
    remove_autogen_mods(config)
    add_autogen_mods(config)
    update_init(config)

    return 0


def parse_args():
    p = ArgumentParser(
        description=(
            "script that generates Python module files in bioimageio.spec that "
            "'link' to a certain spec version. The generated modules act as pass"
            "-through, via `from .vX_Y import *"
        ),
    )
    sps = p.add_subparsers(
        title="subcommands",
    )  # help='additional help')
    p_ck = sps.add_parser("check")
    p_ck.set_defaults(func=check_main)
    p_gen = sps.add_parser("generate")
    p_gen.set_defaults(func=generate_main)

    p_ck.add_argument(
        "--target-version",
        required=True,
        help=("Name of the submodule. This submodule will be made available in `bioimageio.spec`. Example 'v0_3'."),
        type=str,
    )

    p_gen.add_argument(
        "--target-version",
        required=True,
        help=("Name of the submodule. This submodule will be made available in `bioimageio.spec`. Example 'v0_3'."),
        type=str,
    )
    p_gen.add_argument(
        "--dry-run",
        action="store_true",
        default=False,
    )

    args = p.parse_args()
    return args


def main():
    args = parse_args()
    return args.func(args)


if __name__ == "__main__":
    sys.exit(main())
